// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Agency {
  id_agency       Int       @id @default(autoincrement())
  name            String
  legal_name      String
  address         String?
  phone           String?
  email           String?
  tax_id          String
  website         String?
  foundation_date DateTime?
  logo_url        String?
  creation_date   DateTime  @default(now())
  users           User[]
  bookings        Booking[]
}

model User {
  id_user       Int        @id @default(autoincrement())
  email         String     @unique
  password      String
  role          String
  position      String?
  first_name    String
  last_name     String
  creation_date DateTime   @default(now())
  id_agency     Int
  agency        Agency     @relation(fields: [id_agency], references: [id_agency], onDelete: Cascade)
  bookings      Booking[]
  sales_teams   UserTeam[]
  clients       Client[]
}

model Client {
  id_client          Int       @id @default(autoincrement())
  first_name         String
  last_name          String
  phone              String
  address            String?
  postal_code        String?
  locality           String?
  company_name       String?
  tax_id             String?
  commercial_address String?
  dni_number         String?
  passport_number    String?
  birth_date         DateTime
  nationality        String
  gender             String
  email              String?
  registration_date  DateTime  @default(now())
  id_user            Int
  user               User      @relation(fields: [id_user], references: [id_user], onDelete: Cascade)
  bookings           Booking[] @relation("BookingClients")
  titular_bookings   Booking[] @relation("Titular")
  invoices           Invoice[] @relation("ClientInvoices")
}

model Booking {
  id_booking          Int       @id @default(autoincrement())
  clientStatus        String    @map("client_status")
  operatorStatus      String    @map("operator_status")
  status              String
  details             String
  invoice_type        String
  invoice_observation String?
  observation         String?
  creation_date       DateTime  @default(now())
  id_user             Int
  user                User      @relation(fields: [id_user], references: [id_user])
  id_agency           Int
  agency              Agency    @relation(fields: [id_agency], references: [id_agency])
  titular_id          Int
  titular             Client    @relation("Titular", fields: [titular_id], references: [id_client])
  clients             Client[]  @relation("BookingClients")
  services            Service[]
  departure_date      DateTime
  return_date         DateTime
  pax_count           Int       @default(1)
  invoices            Invoice[] @relation("BookingInvoices")
  Receipt             Receipt[] @relation("BookingReceipt")
}

model Service {
  id_service                Int           @id @default(autoincrement())
  type                      String
  description               String
  note                      String?
  sale_price                Float
  cost_price                Float
  destination               String
  reference                 String
  tax_21                    Float?
  tax_105                   Float?
  exempt                    Float?
  other_taxes               Float?
  currency                  String
  nonComputable             Float?
  taxableBase21             Float?
  taxableBase10_5           Float?
  commissionExempt          Float?
  commission21              Float?
  commission10_5            Float?
  vatOnCommission21         Float?
  vatOnCommission10_5       Float?
  totalCommissionWithoutVAT Float?
  impIVA                    Float?
  card_interest             Float?
  card_interest_21          Float?
  taxableCardInterest       Float?
  vatOnCardInterest         Float?
  departure_date            DateTime
  return_date               DateTime
  created_at                DateTime      @default(now())
  booking_id                Int
  booking                   Booking       @relation(fields: [booking_id], references: [id_booking], onDelete: Cascade)
  id_operator               Int
  operator                  Operator      @relation(fields: [id_operator], references: [id_operator], onDelete: Cascade)
  InvoiceItem               InvoiceItem[]
}

model Operator {
  id_operator       Int       @id @default(autoincrement())
  name              String
  email             String?
  phone             String?
  website           String?
  address           String?
  postal_code       String?
  city              String?
  state             String?
  country           String?
  vat_status        String?
  legal_name        String?
  tax_id            String?
  registration_date DateTime  @default(now())
  credit_balance    Float     @default(0)
  debit_balance     Float     @default(0)
  services          Service[]
}

model Invoice {
  id_invoice        Int           @id @default(autoincrement())
  invoice_number    String        @unique
  issue_date        DateTime      @default(now())
  total_amount      Float
  currency          String
  status            String
  type              String
  recipient         String
  facturaHtml       String?
  payloadAfip       Json?
  bookingId_booking Int
  booking           Booking       @relation("BookingInvoices", fields: [bookingId_booking], references: [id_booking])
  client_id         Int
  client            Client        @relation("ClientInvoices", fields: [client_id], references: [id_client])
  credit_notes      CreditNote[]
  InvoiceItem       InvoiceItem[]
}

model InvoiceItem {
  id                  Int      @id @default(autoincrement())
  invoiceId           Int
  invoice             Invoice  @relation(fields: [invoiceId], references: [id_invoice], onDelete: Cascade)
  serviceId           Int?
  service             Service? @relation(fields: [serviceId], references: [id_service])
  description         String
  sale_price          Float
  taxableBase21       Float
  commission21        Float
  tax_21              Float
  vatOnCommission21   Float
  taxableBase10_5     Float?
  commission10_5      Float?
  tax_105             Float?
  vatOnCommission10_5 Float?
  taxableCardInterest Float?
  vatOnCardInterest   Float?
}

model CreditNote {
  id_credit_note Int              @id @default(autoincrement())
  credit_number  String           @unique
  issue_date     DateTime         @default(now())
  total_amount   Float
  currency       String
  status         String
  type           String // "Nota A" | "Nota B"
  recipient      String
  payloadAfip    Json?
  invoiceId      Int
  invoice        Invoice          @relation(fields: [invoiceId], references: [id_invoice])
  items          CreditNoteItem[]
}

model CreditNoteItem {
  id                  Int        @id @default(autoincrement())
  creditNoteId        Int
  creditNote          CreditNote @relation(fields: [creditNoteId], references: [id_credit_note], onDelete: Cascade)
  serviceId           Int?
  description         String
  sale_price          Float
  taxableBase21       Float
  commission21        Float
  tax_21              Float
  vatOnCommission21   Float
  taxableBase10_5     Float?
  commission10_5      Float?
  tax_105             Float?
  vatOnCommission10_5 Float?
  taxableCardInterest Float?
  vatOnCardInterest   Float?
}

model SalesTeam {
  id_team    Int        @id @default(autoincrement())
  name       String
  user_teams UserTeam[]
}

model UserTeam {
  id_user_team Int       @id @default(autoincrement())
  id_user      Int
  id_team      Int
  user         User      @relation(fields: [id_user], references: [id_user])
  sales_team   SalesTeam @relation(fields: [id_team], references: [id_team], onDelete: Cascade)
}

model Receipt {
  id_receipt        Int      @id @default(autoincrement())
  receipt_number    String   @unique
  issue_date        DateTime @default(now())
  amount            Float
  amount_string     String
  amount_currency   String
  concept           String
  currency          String
  bookingId_booking Int
  booking           Booking  @relation("BookingReceipt", fields: [bookingId_booking], references: [id_booking])
  serviceIds        Int[]
  clientIds         Int[]    @default([])
}

model Resources {
  id_resource Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String
  description String?
}
